/** \page Tags Tags

Tags are functional units which are invocable from within templates by using the {% %} block syntax. 

In general, you will need to read the documentation per tag to know how to use it correctly in a given situation. 

If you are interested in implementing a tag of your own, see \ref maketags.

List of built-in tags:
- \subpage ForTag - Basic for loop -- {% for i in list %}
- \subpage IncludeTag - Include another template -- {% include 'header' %}
- \subpage IfTag - Display content based on a predicate -- {% if showTitle %} {{ title }} {% endif %}
- \subpage ExtendsTag - Inheritance mechanism

\section builtinprogress Django built-in tag progress

Below is the list of current Django tags, with information on their implementation status. 

- \subpage Autoescape - Implementation defered until post alpha. 
- \subpage BlockTag 
- \subpage CommentTag 
- \subpage csrf_token - Implementation defered until post alpha. 
- \subpage CycleTag
- \subpage Debug - No plans to implement. Might implement if need arises. 
- \subpage ExtendsTag
- \subpage Filter - No plans to implement. 
- \subpage FirstOf - Implementation defered until post alpha. 
- \subpage ForTag
- \subpage IfTag
- \subpage IfChanged - Planned for alpha
- \subpage IfEqual - No plans to implement. Just use If ==
- \subpage IfNotEqual - No plans to implement. Just use If !=
- \subpage IncludeTag 
- \subpage Load - No plans to implement. The module system in place will not be callable from within templates. 
- \subpage NowTag 
- \subpage Regroup - No plans to implement. Blurs the presentation vs model layer line.
- \subpage SpacelessTag
- \subpage Ssi - No plans to implement. Semi-deprecated in Django.
- \subpage TemplateTag - No plans to implement. Use verbatim or raw.
- \subpage Url - Implementation defered until post alpha. Unsure of the exact form this will take. 
- \subpage VerbatimTag 
- \subpage WidthRatio - No plans to implement. You can more easily do this in code. 
- \subpage With - Planned for alpha. 

*/

/** \page maketags Writing Custom Tags

A tag is a subclass of the Region class. This gives you a requirement of implementing the Region::render function:

~~~~~~~
virtual void render(std::ostream& out, ViewContext& vm) const;    
~~~~~~~

You are given a string and the current context, and it is up to your tag to write whatever it needs to to that stream, with reference to the view context. 

Additionally, you must define how to read your tag. Very rarely are tags simple one word construts, so you are given _all_ of the text between {% %} as 'content', and the stream that it was read from.

The stream given has its internal reference set to right after the declared tag. The idea is that if the tag is something like the for tag, which has an inner body, you need to parse that out yourself (many functions exist that make this easy generally). 

A good example to look at is the ForTag. It uses the template parsing functions to parse out its content names, and then also the inner body contents and the optional empty body. 

The ForTag render functionality is equally as good of an example on how to render. It pushes new variables (the index number, the current item, etc) into scope, iterates over what it needs to, and then pops those off of scope. Since it reuses the template function for it's body, it handles nested for loops correctly. 

The last thing you need to do is register your tag with the list of known tags so that it can be invoked on parse. You can use:

~~~~~~~
stencet::TagFactory::Register<stencet::ForTag>("for"); 
~~~~~~~

anywhere from before parsing a template to do this. Note that a registration function is provided in src/tag.cc that you can add on to. At some point in the future, functionality to load tags from a shared library is going to be added so you do not have to recompile for each tag change. 

*/
